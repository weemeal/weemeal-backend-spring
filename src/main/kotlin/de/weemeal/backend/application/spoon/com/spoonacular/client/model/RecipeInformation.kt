/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.spoonacular.client.model

import com.spoonacular.client.model.RecipeInformationExtendedIngredientsInner
import com.spoonacular.client.model.RecipeInformationWinePairing
import com.spoonacular.client.model.TasteInformation

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 *
 *
 * @param id
 * @param title
 * @param image
 * @param servings
 * @param readyInMinutes
 * @param sourceName
 * @param sourceUrl
 * @param spoonacularSourceUrl
 * @param aggregateLikes
 * @param healthScore
 * @param spoonacularScore
 * @param pricePerServing
 * @param analyzedInstructions
 * @param cheap
 * @param creditsText
 * @param cuisines
 * @param dairyFree
 * @param diets
 * @param gaps
 * @param glutenFree
 * @param instructions
 * @param lowFodmap
 * @param occasions
 * @param sustainable
 * @param vegan
 * @param vegetarian
 * @param veryHealthy
 * @param veryPopular
 * @param weightWatcherSmartPoints
 * @param dishTypes
 * @param extendedIngredients
 * @param summary
 * @param imageType
 * @param preparationMinutes
 * @param cookingMinutes
 * @param license
 * @param winePairing
 * @param taste
 */


data class RecipeInformation(

    @Json(name = "id")
    val id: kotlin.Int,

    @Json(name = "title")
    val title: kotlin.String,

    @Json(name = "image")
    val image: kotlin.String?,

    @Json(name = "servings")
    val servings: java.math.BigDecimal,

    @Json(name = "readyInMinutes")
    val readyInMinutes: kotlin.Int,

    @Json(name = "sourceName")
    val sourceName: kotlin.String,

    @Json(name = "sourceUrl")
    val sourceUrl: kotlin.String,

    @Json(name = "spoonacularSourceUrl")
    val spoonacularSourceUrl: kotlin.String,

    @Json(name = "aggregateLikes")
    val aggregateLikes: kotlin.Int,

    @Json(name = "healthScore")
    val healthScore: java.math.BigDecimal,

    @Json(name = "spoonacularScore")
    val spoonacularScore: java.math.BigDecimal,

    @Json(name = "pricePerServing")
    val pricePerServing: java.math.BigDecimal,

    @Json(name = "analyzedInstructions")
    val analyzedInstructions: kotlin.collections.List<kotlin.Any>,

    @Json(name = "cheap")
    val cheap: kotlin.Boolean,

    @Json(name = "creditsText")
    val creditsText: kotlin.String,

    @Json(name = "cuisines")
    val cuisines: kotlin.collections.List<kotlin.String>,

    @Json(name = "dairyFree")
    val dairyFree: kotlin.Boolean,

    @Json(name = "diets")
    val diets: kotlin.collections.List<kotlin.String>,

    @Json(name = "gaps")
    val gaps: kotlin.String,

    @Json(name = "glutenFree")
    val glutenFree: kotlin.Boolean,

    @Json(name = "instructions")
    val instructions: kotlin.String?,

    @Json(name = "lowFodmap")
    val lowFodmap: kotlin.Boolean,

    @Json(name = "occasions")
    val occasions: kotlin.collections.List<kotlin.String>,

    @Json(name = "sustainable")
    val sustainable: kotlin.Boolean,

    @Json(name = "vegan")
    val vegan: kotlin.Boolean,

    @Json(name = "vegetarian")
    val vegetarian: kotlin.Boolean,

    @Json(name = "veryHealthy")
    val veryHealthy: kotlin.Boolean,

    @Json(name = "veryPopular")
    val veryPopular: kotlin.Boolean,

    @Json(name = "weightWatcherSmartPoints")
    val weightWatcherSmartPoints: java.math.BigDecimal,

    @Json(name = "dishTypes")
    val dishTypes: kotlin.collections.List<kotlin.String>,

    @Json(name = "extendedIngredients")
    val extendedIngredients: kotlin.collections.Set<RecipeInformationExtendedIngredientsInner>,

    @Json(name = "summary")
    val summary: kotlin.String,

    @Json(name = "imageType")
    val imageType: kotlin.String? = null,

    @Json(name = "preparationMinutes")
    val preparationMinutes: kotlin.Int? = null,

    @Json(name = "cookingMinutes")
    val cookingMinutes: kotlin.Int? = null,

    @Json(name = "license")
    val license: kotlin.String? = null,

    @Json(name = "winePairing")
    val winePairing: RecipeInformationWinePairing? = null,

    @Json(name = "taste")
    val taste: TasteInformation? = null

) {


}

