/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.spoonacular

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.spoonacular.client.model.AddMealPlanTemplate200Response
import com.spoonacular.client.model.AddToMealPlanRequest
import com.spoonacular.client.model.AddToShoppingListRequest
import com.spoonacular.client.model.ConnectUser200Response
import com.spoonacular.client.model.ConnectUserRequest
import com.spoonacular.client.model.GenerateMealPlan200Response
import com.spoonacular.client.model.GetMealPlanTemplate200Response
import com.spoonacular.client.model.GetMealPlanTemplates200Response
import com.spoonacular.client.model.GetMealPlanWeek200Response
import com.spoonacular.client.model.GetShoppingList200Response

import com.squareup.moshi.Json

import spoonacular.infrastructure.ApiClient
import spoonacular.infrastructure.ApiResponse
import spoonacular.infrastructure.ClientException
import spoonacular.infrastructure.ClientError
import spoonacular.infrastructure.ServerException
import spoonacular.infrastructure.ServerError
import spoonacular.infrastructure.MultiValueMap
import spoonacular.infrastructure.PartConfig
import spoonacular.infrastructure.RequestConfig
import spoonacular.infrastructure.RequestMethod
import spoonacular.infrastructure.ResponseType
import spoonacular.infrastructure.Success
import spoonacular.infrastructure.toMultiValue

class MealPlanningApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) :
    ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.spoonacular.com")
        }
    }

    /**
     * Add Meal Plan Template
     * Add a meal plan template for a user.
     * @param username The username.
     * @param hash The private hash for the username.
     * @return AddMealPlanTemplate200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun addMealPlanTemplate(username: kotlin.String, hash: kotlin.String): AddMealPlanTemplate200Response {
        val localVarResponse = addMealPlanTemplateWithHttpInfo(username = username, hash = hash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AddMealPlanTemplate200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Add Meal Plan Template
     * Add a meal plan template for a user.
     * @param username The username.
     * @param hash The private hash for the username.
     * @return ApiResponse<AddMealPlanTemplate200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addMealPlanTemplateWithHttpInfo(
        username: kotlin.String,
        hash: kotlin.String
    ): ApiResponse<AddMealPlanTemplate200Response?> {
        val localVariableConfig = addMealPlanTemplateRequestConfig(username = username, hash = hash)

        return request<Unit, AddMealPlanTemplate200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addMealPlanTemplate
     *
     * @param username The username.
     * @param hash The private hash for the username.
     * @return RequestConfig
     */
    fun addMealPlanTemplateRequestConfig(username: kotlin.String, hash: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hash", listOf(hash.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/mealplanner/{username}/templates".replace(
                "{" + "username" + "}",
                encodeURIComponent(username.toString())
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Add to Meal Plan
     * Add an item to the user&#39;s meal plan.
     * @param username The username.
     * @param hash The private hash for the username.
     * @param addToMealPlanRequest
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun addToMealPlan(
        username: kotlin.String,
        hash: kotlin.String,
        addToMealPlanRequest: AddToMealPlanRequest
    ): kotlin.Any {
        val localVarResponse =
            addToMealPlanWithHttpInfo(username = username, hash = hash, addToMealPlanRequest = addToMealPlanRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Add to Meal Plan
     * Add an item to the user&#39;s meal plan.
     * @param username The username.
     * @param hash The private hash for the username.
     * @param addToMealPlanRequest
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addToMealPlanWithHttpInfo(
        username: kotlin.String,
        hash: kotlin.String,
        addToMealPlanRequest: AddToMealPlanRequest
    ): ApiResponse<kotlin.Any?> {
        val localVariableConfig =
            addToMealPlanRequestConfig(username = username, hash = hash, addToMealPlanRequest = addToMealPlanRequest)

        return request<AddToMealPlanRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addToMealPlan
     *
     * @param username The username.
     * @param hash The private hash for the username.
     * @param addToMealPlanRequest
     * @return RequestConfig
     */
    fun addToMealPlanRequestConfig(
        username: kotlin.String,
        hash: kotlin.String,
        addToMealPlanRequest: AddToMealPlanRequest
    ): RequestConfig<AddToMealPlanRequest> {
        val localVariableBody = addToMealPlanRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hash", listOf(hash.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/mealplanner/{username}/items".replace(
                "{" + "username" + "}",
                encodeURIComponent(username.toString())
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Add to Shopping List
     * Add an item to the current shopping list of a user.
     * @param username The username.
     * @param hash The private hash for the username.
     * @param addToShoppingListRequest
     * @return GetShoppingList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun addToShoppingList(
        username: kotlin.String,
        hash: kotlin.String,
        addToShoppingListRequest: AddToShoppingListRequest
    ): GetShoppingList200Response {
        val localVarResponse = addToShoppingListWithHttpInfo(
            username = username,
            hash = hash,
            addToShoppingListRequest = addToShoppingListRequest
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetShoppingList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Add to Shopping List
     * Add an item to the current shopping list of a user.
     * @param username The username.
     * @param hash The private hash for the username.
     * @param addToShoppingListRequest
     * @return ApiResponse<GetShoppingList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addToShoppingListWithHttpInfo(
        username: kotlin.String,
        hash: kotlin.String,
        addToShoppingListRequest: AddToShoppingListRequest
    ): ApiResponse<GetShoppingList200Response?> {
        val localVariableConfig = addToShoppingListRequestConfig(
            username = username,
            hash = hash,
            addToShoppingListRequest = addToShoppingListRequest
        )

        return request<AddToShoppingListRequest, GetShoppingList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addToShoppingList
     *
     * @param username The username.
     * @param hash The private hash for the username.
     * @param addToShoppingListRequest
     * @return RequestConfig
     */
    fun addToShoppingListRequestConfig(
        username: kotlin.String,
        hash: kotlin.String,
        addToShoppingListRequest: AddToShoppingListRequest
    ): RequestConfig<AddToShoppingListRequest> {
        val localVariableBody = addToShoppingListRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hash", listOf(hash.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/mealplanner/{username}/shopping-list/items".replace(
                "{" + "username" + "}",
                encodeURIComponent(username.toString())
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Clear Meal Plan Day
     * Delete all planned items from the user&#39;s meal plan for a specific day.
     * @param username The username.
     * @param date The date in the format yyyy-mm-dd.
     * @param hash The private hash for the username.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun clearMealPlanDay(username: kotlin.String, date: kotlin.String, hash: kotlin.String): kotlin.Any {
        val localVarResponse = clearMealPlanDayWithHttpInfo(username = username, date = date, hash = hash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Clear Meal Plan Day
     * Delete all planned items from the user&#39;s meal plan for a specific day.
     * @param username The username.
     * @param date The date in the format yyyy-mm-dd.
     * @param hash The private hash for the username.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun clearMealPlanDayWithHttpInfo(
        username: kotlin.String,
        date: kotlin.String,
        hash: kotlin.String
    ): ApiResponse<kotlin.Any?> {
        val localVariableConfig = clearMealPlanDayRequestConfig(username = username, date = date, hash = hash)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation clearMealPlanDay
     *
     * @param username The username.
     * @param date The date in the format yyyy-mm-dd.
     * @param hash The private hash for the username.
     * @return RequestConfig
     */
    fun clearMealPlanDayRequestConfig(
        username: kotlin.String,
        date: kotlin.String,
        hash: kotlin.String
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hash", listOf(hash.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/mealplanner/{username}/day/{date}".replace(
                "{" + "username" + "}",
                encodeURIComponent(username.toString())
            ).replace("{" + "date" + "}", encodeURIComponent(date.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Connect User
     * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
     * @param connectUserRequest
     * @return ConnectUser200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun connectUser(connectUserRequest: ConnectUserRequest): ConnectUser200Response {
        val localVarResponse = connectUserWithHttpInfo(connectUserRequest = connectUserRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ConnectUser200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Connect User
     * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
     * @param connectUserRequest
     * @return ApiResponse<ConnectUser200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun connectUserWithHttpInfo(connectUserRequest: ConnectUserRequest): ApiResponse<ConnectUser200Response?> {
        val localVariableConfig = connectUserRequestConfig(connectUserRequest = connectUserRequest)

        return request<ConnectUserRequest, ConnectUser200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation connectUser
     *
     * @param connectUserRequest
     * @return RequestConfig
     */
    fun connectUserRequestConfig(connectUserRequest: ConnectUserRequest): RequestConfig<ConnectUserRequest> {
        val localVariableBody = connectUserRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users/connect",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete from Meal Plan
     * Delete an item from the user&#39;s meal plan.
     * @param username The username.
     * @param id The shopping list item id.
     * @param hash The private hash for the username.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteFromMealPlan(username: kotlin.String, id: kotlin.Int, hash: kotlin.String): kotlin.Any {
        val localVarResponse = deleteFromMealPlanWithHttpInfo(username = username, id = id, hash = hash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete from Meal Plan
     * Delete an item from the user&#39;s meal plan.
     * @param username The username.
     * @param id The shopping list item id.
     * @param hash The private hash for the username.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteFromMealPlanWithHttpInfo(
        username: kotlin.String,
        id: kotlin.Int,
        hash: kotlin.String
    ): ApiResponse<kotlin.Any?> {
        val localVariableConfig = deleteFromMealPlanRequestConfig(username = username, id = id, hash = hash)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteFromMealPlan
     *
     * @param username The username.
     * @param id The shopping list item id.
     * @param hash The private hash for the username.
     * @return RequestConfig
     */
    fun deleteFromMealPlanRequestConfig(
        username: kotlin.String,
        id: kotlin.Int,
        hash: kotlin.String
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hash", listOf(hash.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/mealplanner/{username}/items/{id}".replace(
                "{" + "username" + "}",
                encodeURIComponent(username.toString())
            ).replace("{" + "id" + "}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete from Shopping List
     * Delete an item from the current shopping list of the user.
     * @param username The username.
     * @param id The shopping list item id.
     * @param hash The private hash for the username.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteFromShoppingList(username: kotlin.String, id: kotlin.Int, hash: kotlin.String): kotlin.Any {
        val localVarResponse = deleteFromShoppingListWithHttpInfo(username = username, id = id, hash = hash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete from Shopping List
     * Delete an item from the current shopping list of the user.
     * @param username The username.
     * @param id The shopping list item id.
     * @param hash The private hash for the username.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteFromShoppingListWithHttpInfo(
        username: kotlin.String,
        id: kotlin.Int,
        hash: kotlin.String
    ): ApiResponse<kotlin.Any?> {
        val localVariableConfig = deleteFromShoppingListRequestConfig(username = username, id = id, hash = hash)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteFromShoppingList
     *
     * @param username The username.
     * @param id The shopping list item id.
     * @param hash The private hash for the username.
     * @return RequestConfig
     */
    fun deleteFromShoppingListRequestConfig(
        username: kotlin.String,
        id: kotlin.Int,
        hash: kotlin.String
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hash", listOf(hash.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/mealplanner/{username}/shopping-list/items/{id}".replace(
                "{" + "username" + "}",
                encodeURIComponent(username.toString())
            ).replace("{" + "id" + "}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete Meal Plan Template
     * Delete a meal plan template for a user.
     * @param username The username.
     * @param id The shopping list item id.
     * @param hash The private hash for the username.
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun deleteMealPlanTemplate(username: kotlin.String, id: kotlin.Int, hash: kotlin.String): kotlin.Any {
        val localVarResponse = deleteMealPlanTemplateWithHttpInfo(username = username, id = id, hash = hash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Delete Meal Plan Template
     * Delete a meal plan template for a user.
     * @param username The username.
     * @param id The shopping list item id.
     * @param hash The private hash for the username.
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteMealPlanTemplateWithHttpInfo(
        username: kotlin.String,
        id: kotlin.Int,
        hash: kotlin.String
    ): ApiResponse<kotlin.Any?> {
        val localVariableConfig = deleteMealPlanTemplateRequestConfig(username = username, id = id, hash = hash)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteMealPlanTemplate
     *
     * @param username The username.
     * @param id The shopping list item id.
     * @param hash The private hash for the username.
     * @return RequestConfig
     */
    fun deleteMealPlanTemplateRequestConfig(
        username: kotlin.String,
        id: kotlin.Int,
        hash: kotlin.String
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hash", listOf(hash.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/mealplanner/{username}/templates/{id}".replace(
                "{" + "username" + "}",
                encodeURIComponent(username.toString())
            ).replace("{" + "id" + "}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Generate Meal Plan
     * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
     * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
     * @return GenerateMealPlan200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun generateMealPlan(
        timeFrame: kotlin.String? = null,
        targetCalories: java.math.BigDecimal? = null,
        diet: kotlin.String? = null,
        exclude: kotlin.String? = null
    ): GenerateMealPlan200Response {
        val localVarResponse = generateMealPlanWithHttpInfo(
            timeFrame = timeFrame,
            targetCalories = targetCalories,
            diet = diet,
            exclude = exclude
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GenerateMealPlan200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Generate Meal Plan
     * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
     * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
     * @return ApiResponse<GenerateMealPlan200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun generateMealPlanWithHttpInfo(
        timeFrame: kotlin.String?,
        targetCalories: java.math.BigDecimal?,
        diet: kotlin.String?,
        exclude: kotlin.String?
    ): ApiResponse<GenerateMealPlan200Response?> {
        val localVariableConfig = generateMealPlanRequestConfig(
            timeFrame = timeFrame,
            targetCalories = targetCalories,
            diet = diet,
            exclude = exclude
        )

        return request<Unit, GenerateMealPlan200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation generateMealPlan
     *
     * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
     * @return RequestConfig
     */
    fun generateMealPlanRequestConfig(
        timeFrame: kotlin.String?,
        targetCalories: java.math.BigDecimal?,
        diet: kotlin.String?,
        exclude: kotlin.String?
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (timeFrame != null) {
                    put("timeFrame", listOf(timeFrame.toString()))
                }
                if (targetCalories != null) {
                    put("targetCalories", listOf(targetCalories.toString()))
                }
                if (diet != null) {
                    put("diet", listOf(diet.toString()))
                }
                if (exclude != null) {
                    put("exclude", listOf(exclude.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mealplanner/generate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Generate Shopping List
     * Generate the shopping list for a user from the meal planner in a given time frame.
     * @param username The username.
     * @param startDate The start date in the format yyyy-mm-dd.
     * @param endDate The end date in the format yyyy-mm-dd.
     * @param hash The private hash for the username.
     * @return GetShoppingList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun generateShoppingList(
        username: kotlin.String,
        startDate: kotlin.String,
        endDate: kotlin.String,
        hash: kotlin.String
    ): GetShoppingList200Response {
        val localVarResponse =
            generateShoppingListWithHttpInfo(username = username, startDate = startDate, endDate = endDate, hash = hash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetShoppingList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Generate Shopping List
     * Generate the shopping list for a user from the meal planner in a given time frame.
     * @param username The username.
     * @param startDate The start date in the format yyyy-mm-dd.
     * @param endDate The end date in the format yyyy-mm-dd.
     * @param hash The private hash for the username.
     * @return ApiResponse<GetShoppingList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun generateShoppingListWithHttpInfo(
        username: kotlin.String,
        startDate: kotlin.String,
        endDate: kotlin.String,
        hash: kotlin.String
    ): ApiResponse<GetShoppingList200Response?> {
        val localVariableConfig = generateShoppingListRequestConfig(
            username = username,
            startDate = startDate,
            endDate = endDate,
            hash = hash
        )

        return request<Unit, GetShoppingList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation generateShoppingList
     *
     * @param username The username.
     * @param startDate The start date in the format yyyy-mm-dd.
     * @param endDate The end date in the format yyyy-mm-dd.
     * @param hash The private hash for the username.
     * @return RequestConfig
     */
    fun generateShoppingListRequestConfig(
        username: kotlin.String,
        startDate: kotlin.String,
        endDate: kotlin.String,
        hash: kotlin.String
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hash", listOf(hash.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/mealplanner/{username}/shopping-list/{start_date}/{end_date}".replace(
                "{" + "username" + "}",
                encodeURIComponent(username.toString())
            ).replace("{" + "start_date" + "}", encodeURIComponent(startDate.toString()))
                .replace("{" + "end_date" + "}", encodeURIComponent(endDate.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Meal Plan Template
     * Get information about a meal plan template.
     * @param username The username.
     * @param id The shopping list item id.
     * @param hash The private hash for the username.
     * @return GetMealPlanTemplate200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getMealPlanTemplate(
        username: kotlin.String,
        id: kotlin.Int,
        hash: kotlin.String
    ): GetMealPlanTemplate200Response {
        val localVarResponse = getMealPlanTemplateWithHttpInfo(username = username, id = id, hash = hash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetMealPlanTemplate200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get Meal Plan Template
     * Get information about a meal plan template.
     * @param username The username.
     * @param id The shopping list item id.
     * @param hash The private hash for the username.
     * @return ApiResponse<GetMealPlanTemplate200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMealPlanTemplateWithHttpInfo(
        username: kotlin.String,
        id: kotlin.Int,
        hash: kotlin.String
    ): ApiResponse<GetMealPlanTemplate200Response?> {
        val localVariableConfig = getMealPlanTemplateRequestConfig(username = username, id = id, hash = hash)

        return request<Unit, GetMealPlanTemplate200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMealPlanTemplate
     *
     * @param username The username.
     * @param id The shopping list item id.
     * @param hash The private hash for the username.
     * @return RequestConfig
     */
    fun getMealPlanTemplateRequestConfig(
        username: kotlin.String,
        id: kotlin.Int,
        hash: kotlin.String
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hash", listOf(hash.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mealplanner/{username}/templates/{id}".replace(
                "{" + "username" + "}",
                encodeURIComponent(username.toString())
            ).replace("{" + "id" + "}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Meal Plan Templates
     * Get meal plan templates from user or public ones.
     * @param username The username.
     * @param hash The private hash for the username.
     * @return GetMealPlanTemplates200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getMealPlanTemplates(username: kotlin.String, hash: kotlin.String): GetMealPlanTemplates200Response {
        val localVarResponse = getMealPlanTemplatesWithHttpInfo(username = username, hash = hash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetMealPlanTemplates200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get Meal Plan Templates
     * Get meal plan templates from user or public ones.
     * @param username The username.
     * @param hash The private hash for the username.
     * @return ApiResponse<GetMealPlanTemplates200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMealPlanTemplatesWithHttpInfo(
        username: kotlin.String,
        hash: kotlin.String
    ): ApiResponse<GetMealPlanTemplates200Response?> {
        val localVariableConfig = getMealPlanTemplatesRequestConfig(username = username, hash = hash)

        return request<Unit, GetMealPlanTemplates200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMealPlanTemplates
     *
     * @param username The username.
     * @param hash The private hash for the username.
     * @return RequestConfig
     */
    fun getMealPlanTemplatesRequestConfig(username: kotlin.String, hash: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hash", listOf(hash.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mealplanner/{username}/templates".replace(
                "{" + "username" + "}",
                encodeURIComponent(username.toString())
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Meal Plan Week
     * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
     * @param username The username.
     * @param startDate The start date of the meal planned week in the format yyyy-mm-dd.
     * @param hash The private hash for the username.
     * @return GetMealPlanWeek200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getMealPlanWeek(
        username: kotlin.String,
        startDate: kotlin.String,
        hash: kotlin.String
    ): GetMealPlanWeek200Response {
        val localVarResponse = getMealPlanWeekWithHttpInfo(username = username, startDate = startDate, hash = hash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetMealPlanWeek200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get Meal Plan Week
     * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
     * @param username The username.
     * @param startDate The start date of the meal planned week in the format yyyy-mm-dd.
     * @param hash The private hash for the username.
     * @return ApiResponse<GetMealPlanWeek200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getMealPlanWeekWithHttpInfo(
        username: kotlin.String,
        startDate: kotlin.String,
        hash: kotlin.String
    ): ApiResponse<GetMealPlanWeek200Response?> {
        val localVariableConfig = getMealPlanWeekRequestConfig(username = username, startDate = startDate, hash = hash)

        return request<Unit, GetMealPlanWeek200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getMealPlanWeek
     *
     * @param username The username.
     * @param startDate The start date of the meal planned week in the format yyyy-mm-dd.
     * @param hash The private hash for the username.
     * @return RequestConfig
     */
    fun getMealPlanWeekRequestConfig(
        username: kotlin.String,
        startDate: kotlin.String,
        hash: kotlin.String
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hash", listOf(hash.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mealplanner/{username}/week/{start_date}".replace(
                "{" + "username" + "}",
                encodeURIComponent(username.toString())
            ).replace("{" + "start_date" + "}", encodeURIComponent(startDate.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Shopping List
     * Get the current shopping list for the given user.
     * @param username The username.
     * @param hash The private hash for the username.
     * @return GetShoppingList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(
        IllegalStateException::class,
        IOException::class,
        UnsupportedOperationException::class,
        ClientException::class,
        ServerException::class
    )
    fun getShoppingList(username: kotlin.String, hash: kotlin.String): GetShoppingList200Response {
        val localVarResponse = getShoppingListWithHttpInfo(username = username, hash = hash)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetShoppingList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException(
                    "Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }

            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException(
                    "Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}",
                    localVarError.statusCode,
                    localVarResponse
                )
            }
        }
    }

    /**
     * Get Shopping List
     * Get the current shopping list for the given user.
     * @param username The username.
     * @param hash The private hash for the username.
     * @return ApiResponse<GetShoppingList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getShoppingListWithHttpInfo(
        username: kotlin.String,
        hash: kotlin.String
    ): ApiResponse<GetShoppingList200Response?> {
        val localVariableConfig = getShoppingListRequestConfig(username = username, hash = hash)

        return request<Unit, GetShoppingList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getShoppingList
     *
     * @param username The username.
     * @param hash The private hash for the username.
     * @return RequestConfig
     */
    fun getShoppingListRequestConfig(username: kotlin.String, hash: kotlin.String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("hash", listOf(hash.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mealplanner/{username}/shopping-list".replace(
                "{" + "username" + "}",
                encodeURIComponent(username.toString())
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
